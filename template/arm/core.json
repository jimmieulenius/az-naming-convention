{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "10877166579266068052"
    }
  },
  "definitions": {
    "resolveItemType": {
      "type": "object",
      "properties": {
        "object": {
          "type": "object",
          "nullable": true
        },
        "key": {
          "type": "string"
        }
      }
    },
    "placeholderInfoType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "optional": {
          "type": "bool"
        }
      },
      "nullable": true
    },
    "formatNameInfoType": {
      "type": "object",
      "properties": {
        "formatString": {
          "$ref": "#/definitions/formatStringType"
        },
        "separator": {
          "type": "string",
          "nullable": true
        },
        "placeholders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/placeholderInfoType"
          }
        },
        "values": {
          "type": "object"
        },
        "valueKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validValueKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "casing": {
          "type": "string",
          "nullable": true
        },
        "maxLength": {
          "type": "int",
          "nullable": true
        },
        "additionalValues": {
          "type": "bool"
        }
      }
    },
    "formatNameResultType": {
      "type": "object",
      "properties": {
        "formatInfo": {
          "$ref": "#/definitions/formatNameInfoType"
        },
        "result": {
          "type": "string"
        },
        "isValid": {
          "type": "bool"
        }
      }
    },
    "environmentInfoType": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "regionInfoType": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "resourceTypeInfoType": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "instanceInfoType": {
      "type": "object",
      "properties": {
        "value": {
          "type": "int",
          "nullable": true
        },
        "minValue": {
          "type": "int",
          "nullable": true
        },
        "maxValue": {
          "type": "int"
        },
        "padding": {
          "type": "object",
          "properties": {
            "totalLength": {
              "type": "int"
            },
            "character": {
              "type": "string"
            }
          }
        }
      }
    },
    "uniqueInfoType": {
      "type": "object",
      "properties": {
        "length": {
          "type": "int",
          "nullable": true
        },
        "seed": {
          "type": "string",
          "nullable": true
        }
      }
    },
    "formatStringType": {
      "type": "object",
      "properties": {
        "lookup": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "keyValueType": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "stringValue": {
          "type": "string"
        }
      }
    },
    "nameFunctionOptionType": {
      "type": "string",
      "allowedValues": [
        "evaluateName",
        "formatName"
      ]
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "formatName": {
          "parameters": [
            {
              "type": "string",
              "name": "formatString"
            },
            {
              "type": "object",
              "name": "values"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "additionalValues"
            }
          ],
          "output": {
            "type": "string",
            "value": "[__bicep.evaluateName(parameters('formatString'), parameters('values'), parameters('formatConfig'), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('userConfig'), parameters('additionalValues'), true()).result]"
          },
          "metadata": {
            "__bicep_export!": true
          }
        },
        "evaluateName": {
          "parameters": [
            {
              "type": "string",
              "name": "formatString"
            },
            {
              "type": "object",
              "name": "values"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "additionalValues"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "$ref": "#/definitions/formatNameResultType",
            "value": "[map(map(map(createArray(createObject('formatInfo', __bicep.getFormatInfo(createObject('lookup', parameters('formatString'), 'value', __bicep.getFormatString(parameters('formatString'), parameters('formatConfig'), coalesce(tryGet(parameters('userConfig'), 'format'), createObject()))), parameters('values'), parameters('formatConfig'), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('userConfig'), parameters('additionalValues'), coalesce(parameters('throwError'), false())), 'result', null(), 'isValid', false())), lambda('item', createObject('formatInfo', lambdaVariables('item').formatInfo, 'result', lambdaVariables('item').result, 'isValid', __bicep.validate(lambdaVariables('item').formatInfo, lambdaVariables('item').result, coalesce(parameters('throwError'), false()))))), lambda('item', createObject('formatInfo', lambdaVariables('item').formatInfo, 'result', if(or(lambdaVariables('item').isValid, not(coalesce(parameters('throwError'), false()))), trim(__bicep.replacePlaceholders(lambdaVariables('item').formatInfo)), ''), 'isValid', lambdaVariables('item').isValid))), lambda('item', createObject('formatInfo', lambdaVariables('item').formatInfo, 'result', if(lambdaVariables('item').isValid, __bicep.applyCasing(lambdaVariables('item').result, lambdaVariables('item').formatInfo.casing), lambdaVariables('item').result), 'isValid', if(lambdaVariables('item').isValid, __bicep.validate(lambdaVariables('item').formatInfo, lambdaVariables('item').result, coalesce(parameters('throwError'), false())), false()))))[0]]"
          },
          "metadata": {
            "__bicep_export!": true
          }
        },
        "nameGraph": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "commonFormatString"
            },
            {
              "type": "object",
              "name": "commonValues"
            },
            {
              "type": "object",
              "name": "graph"
            },
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "additionalValues"
            }
          ],
          "output": {
            "type": "object",
            "value": "[__bicep.applyOnGraph0(parameters('graph'), parameters('function'), createObject('formatString', parameters('commonFormatString'), 'values', parameters('commonValues'), 'formatConfig', parameters('formatConfig'), 'resourceTypeConfig', parameters('resourceTypeConfig'), 'regionConfig', parameters('regionConfig'), 'environmentConfig', parameters('environmentConfig'), 'userConfig', parameters('userConfig'), 'additionalValues', parameters('additionalValues')))]"
          },
          "metadata": {
            "__bicep_export!": true
          }
        },
        "applyOnGraph0": {
          "parameters": [
            {
              "type": "object",
              "name": "object"
            },
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('object')), lambda('item', createObject('key', lambdaVariables('item').key, 'value', if(__bicep.isObjectItem(lambdaVariables('item')), if(__bicep.isNameObject(lambdaVariables('item').value), __bicep.invokeNameFunction(parameters('function'), __bicep.getNameFunctionParameters(lambdaVariables('item').value, parameters('param'))).result, __bicep.applyOnGraph1(lambdaVariables('item'), parameters('function'), parameters('param'))), lambdaVariables('item').value)))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), createObject(format('{0}', lambdaVariables('next').key), lambdaVariables('next').value))))]"
          }
        },
        "applyOnGraph1": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            },
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('keyValue').value), lambda('item', createObject('key', lambdaVariables('item').key, 'value', if(__bicep.isObjectItem(lambdaVariables('item')), if(__bicep.isNameObject(lambdaVariables('item').value), __bicep.invokeNameFunction(parameters('function'), __bicep.getNameFunctionParameters(lambdaVariables('item').value, parameters('param'))).result, __bicep.applyOnGraph2(lambdaVariables('item'), parameters('function'), parameters('param'))), lambdaVariables('item').value)))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), createObject(format('{0}', lambdaVariables('next').key), lambdaVariables('next').value))))]"
          }
        },
        "applyOnGraph2": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            },
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('keyValue').value), lambda('item', createObject('key', lambdaVariables('item').key, 'value', if(__bicep.isObjectItem(lambdaVariables('item')), if(__bicep.isNameObject(lambdaVariables('item').value), __bicep.invokeNameFunction(parameters('function'), __bicep.getNameFunctionParameters(lambdaVariables('item').value, parameters('param'))).result, __bicep.applyOnGraph3(lambdaVariables('item'), parameters('function'), parameters('param'))), lambdaVariables('item').value)))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), createObject(format('{0}', lambdaVariables('next').key), lambdaVariables('next').value))))]"
          }
        },
        "applyOnGraph3": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            },
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('keyValue').value), lambda('item', createObject('key', lambdaVariables('item').key, 'value', if(__bicep.isObjectItem(lambdaVariables('item')), if(__bicep.isNameObject(lambdaVariables('item').value), __bicep.invokeNameFunction(parameters('function'), __bicep.getNameFunctionParameters(lambdaVariables('item').value, parameters('param'))).result, lambdaVariables('item').value), lambdaVariables('item').value)))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), createObject(format('{0}', lambdaVariables('next').key), lambdaVariables('next').value))))]"
          }
        },
        "invokeNameFunction": {
          "parameters": [
            {
              "$ref": "#/definitions/nameFunctionOptionType",
              "name": "function"
            },
            {
              "type": "object",
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": {
              "result": "[if(equals(parameters('function'), 'formatName'), __bicep.formatName(parameters('param').formatString, parameters('param').values, parameters('param').formatConfig, parameters('param').resourceTypeConfig, parameters('param').regionConfig, parameters('param').environmentConfig, parameters('param').userConfig, parameters('param').additionalValues), __bicep.evaluateName(parameters('param').formatString, parameters('param').values, parameters('param').formatConfig, parameters('param').resourceTypeConfig, parameters('param').regionConfig, parameters('param').environmentConfig, parameters('param').userConfig, parameters('param').additionalValues, null()))]"
            }
          }
        },
        "getNameFunctionParameters": {
          "parameters": [
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "param"
            }
          ],
          "output": {
            "type": "object",
            "value": "[union(coalesce(parameters('param'), createObject()), createObject('formatString', coalesce(map(createArray(coalesce(tryGet(parameters('value'), 'formatString'), tryGet(parameters('param'), 'formatString'))), lambda('item', if(and(contains(coalesce(lambdaVariables('item'), ''), '{'), contains(coalesce(lambdaVariables('item'), ''), '}')), lambdaVariables('item'), if(not(equals(lambdaVariables('item'), 'deployment')), coalesce(tryGet(tryGet(parameters('value'), 'values'), 'RESOURCE_TYPE'), tryGet(tryGet(parameters('param'), 'values'), 'RESOURCE_TYPE')), lambdaVariables('item')))))[0], '$default'), 'values', union(coalesce(tryGet(parameters('param'), 'values'), createObject()), coalesce(tryGet(parameters('value'), 'values'), createObject()))))]"
          }
        },
        "isNameObject": {
          "parameters": [
            {
              "type": "object",
              "nullable": true,
              "name": "object"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[or(or(not(equals(tryGet(parameters('object'), 'formatString'), null())), not(equals(tryGet(parameters('object'), 'resourceType'), null()))), not(equals(tryGet(parameters('object'), 'values'), null())))]"
          }
        },
        "isObjectItem": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[map(createArray(createObject('key', parameters('keyValue').key, 'value', parameters('keyValue').value, 'stringValue', string(coalesce(parameters('keyValue').value, '')))), lambda('item', and(startsWith(lambdaVariables('item').stringValue, '{'), endsWith(lambdaVariables('item').stringValue, '}'))))[0]]"
          }
        },
        "getFormatInfo": {
          "parameters": [
            {
              "$ref": "#/definitions/formatStringType",
              "name": "formatString"
            },
            {
              "type": "object",
              "name": "values"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "additionalValues"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "$ref": "#/definitions/formatNameInfoType",
            "value": "[map(createArray(map(createArray(createObject('formatString', parameters('formatString'), 'separator', __bicep.getSeparatorString(parameters('formatString').lookup, parameters('formatConfig'), coalesce(tryGet(parameters('userConfig'), 'format'), createObject())), 'placeholders', __bicep.getPlaceholderInfo(parameters('formatString').value), 'values', parameters('values'), 'valueKeys', objectKeys(parameters('values')), 'validValueKeys', createArray(), 'casing', __bicep.getCasing(parameters('formatString').lookup, parameters('formatConfig'), coalesce(tryGet(parameters('userConfig'), 'format'), createObject())), 'maxLength', __bicep.getMaxLength(parameters('formatString').lookup, parameters('formatConfig'), coalesce(tryGet(parameters('userConfig'), 'format'), createObject())), 'additionalValues', coalesce(parameters('additionalValues'), true()))), lambda('item', createObject('formatString', lambdaVariables('item').formatString, 'separator', lambdaVariables('item').separator, 'placeholders', lambdaVariables('item').placeholders, 'values', __bicep.initializeValues(lambdaVariables('item'), parameters('formatConfig'), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('userConfig'), parameters('throwError')), 'valueKeys', lambdaVariables('item').valueKeys, 'validValueKeys', lambdaVariables('item').validValueKeys, 'casing', lambdaVariables('item').casing, 'maxLength', lambdaVariables('item').maxLength, 'additionalValues', lambdaVariables('item').additionalValues)))[0]), lambda('item', createObject('formatString', lambdaVariables('item').formatString, 'separator', lambdaVariables('item').separator, 'placeholders', lambdaVariables('item').placeholders, 'values', lambdaVariables('item').values, 'valueKeys', lambdaVariables('item').valueKeys, 'validValueKeys', __bicep.getValidValueKeys(lambdaVariables('item').placeholders, lambdaVariables('item').values), 'casing', lambdaVariables('item').casing, 'maxLength', lambdaVariables('item').maxLength, 'additionalValues', lambdaVariables('item').additionalValues)))[0]]"
          }
        },
        "replacePlaceholders": {
          "parameters": [
            {
              "$ref": "#/definitions/formatNameInfoType",
              "name": "formatInfo"
            }
          ],
          "output": {
            "type": "string",
            "value": "[join(map(map(split(parameters('formatInfo').formatString.value, '['), lambda('item0', reduce(map(items(parameters('formatInfo').values), lambda('item1', createObject('key', lambdaVariables('item1').key, 'value', lambdaVariables('item1').value, 'result', lambdaVariables('item0')))), createObject('result', lambdaVariables('item0')), lambda('current', 'next', createObject('result', if(and(contains(parameters('formatInfo').validValueKeys, lambdaVariables('next').key), not(equals(lambdaVariables('next').value, null()))), replace(lambdaVariables('current').result, format('{{{0}}}', lambdaVariables('next').key), string(coalesce(lambdaVariables('next').value, ''))), lambdaVariables('current').result)))).result)), lambda('item', if(contains(lambdaVariables('item'), ']'), join(map(split(lambdaVariables('item'), ']'), lambda('item1', 'index1', if(greater(lambdaVariables('index1'), 0), lambdaVariables('item1'), if(and(contains(lambdaVariables('item1'), '{'), contains(lambdaVariables('item1'), '}')), '', lambdaVariables('item1'))))), ''), lambdaVariables('item')))), '')]"
          }
        },
        "initializeValues": {
          "parameters": [
            {
              "$ref": "#/definitions/formatNameInfoType",
              "name": "formatInfo"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(union(parameters('formatInfo').values, if(and(equals(tryGet(parameters('formatInfo').values, 'RESOURCE_TYPE'), null()), contains(parameters('resourceTypeConfig'), parameters('formatInfo').formatString.lookup)), createObject('RESOURCE_TYPE', parameters('formatInfo').formatString.lookup), createObject()), if(and(equals(tryGet(parameters('formatInfo').values, '-'), null()), equals(tryGet(parameters('formatInfo').values, 'SEPARATOR'), null())), createObject('-', parameters('formatInfo').separator, 'SEPARATOR', parameters('formatInfo').separator), createObject()))), lambda('item0', createObject(format('{0}', lambdaVariables('item0').key), if(greater(length(filter(parameters('formatInfo').placeholders, lambda('item1', equals(tryGet(lambdaVariables('item1'), 'name'), lambdaVariables('item0').key)))), 0), if(not(equals(lambdaVariables('item0').value, null())), if(equals(lambdaVariables('item0').key, 'ENVIRONMENT'), __bicep.getEnvironmentString(__bicep.resolveEnvironmentValue(lambdaVariables('item0').key, coalesce(__bicep.getValueKey(lambdaVariables('item0').key, string(coalesce(lambdaVariables('item0').value, '')), parameters('userConfig')), ''), parameters('environmentConfig'), parameters('userConfig'))), if(equals(lambdaVariables('item0').key, 'INSTANCE'), __bicep.getInstanceString(__bicep.resolveInstanceValue(lambdaVariables('item0').value, null(), '$instance', parameters('formatConfig'), parameters('userConfig'))), if(equals(lambdaVariables('item0').key, 'REGION'), __bicep.getRegionString(__bicep.resolveRegionValue(lambdaVariables('item0').value, parameters('regionConfig'))), if(equals(lambdaVariables('item0').key, 'RESOURCE_TYPE'), __bicep.getResourceTypeString(__bicep.resolveResourceTypeValue(lambdaVariables('item0').value, parameters('resourceTypeConfig'), parameters('throwError'))), if(equals(lambdaVariables('item0').key, 'UNIQUE'), __bicep.getUniqueString(__bicep.resolveUniqueValue(lambdaVariables('item0').value, parameters('formatInfo').values, parameters('formatInfo').placeholders, null(), '$unique', parameters('formatConfig'), parameters('userConfig'))), if(contains(coalesce(tryGet(tryGet(parameters('userConfig'), 'placeholder'), lambdaVariables('item0').key), createObject()), '$instance'), __bicep.getInstanceString(__bicep.resolveInstanceValue(lambdaVariables('item0').value, lambdaVariables('item0').key, '$instance', parameters('formatConfig'), parameters('userConfig'))), if(contains(coalesce(tryGet(tryGet(parameters('userConfig'), 'placeholder'), lambdaVariables('item0').key), createObject()), '$unique'), __bicep.getUniqueString(__bicep.resolveUniqueValue(lambdaVariables('item0').value, parameters('formatInfo').values, parameters('formatInfo').placeholders, lambdaVariables('item0').key, '$unique', parameters('formatConfig'), parameters('userConfig'))), coalesce(__bicep.getValueString(__bicep.resolveValue(lambdaVariables('item0').key, coalesce(__bicep.getValueKey(lambdaVariables('item0').key, string(coalesce(lambdaVariables('item0').value, '')), parameters('userConfig')), ''), parameters('userConfig'), parameters('throwError'))), lambdaVariables('item0').value)))))))), null()), null())))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), lambdaVariables('next'))))]"
          }
        },
        "getValueKey": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "valueKey"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[if(not(equals(trim(coalesce(parameters('valueKey'), '')), '')), parameters('valueKey'), __bicep.resolveDefaultValueKey(parameters('configKey'), parameters('config')))]"
          }
        },
        "resolveDefaultValueKey": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "config"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[__bicep.resolveAny(createArray(createObject('key', 'default', 'object', tryGet(tryGet(parameters('config'), 'placeholder'), parameters('configKey'))))).result]"
          }
        },
        "resolveEnvironmentValue": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "string",
              "name": "valueKey"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            }
          ],
          "output": {
            "$ref": "#/definitions/environmentInfoType",
            "value": "[map(createArray(__bicep.resolveAny(createArray(createObject('key', parameters('valueKey'), 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), parameters('configKey')), 'allowedValues')), createObject('key', parameters('valueKey'), 'object', parameters('environmentConfig')))).result), lambda('item', createObject('abbreviation', coalesce(tryGet(lambdaVariables('item'), 'abbreviation'), ''), 'name', parameters('valueKey'))))[0]]"
          }
        },
        "resolveRegionValue": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "regionConfig"
            }
          ],
          "output": {
            "$ref": "#/definitions/regionInfoType",
            "value": "[map(createArray(parameters('regionConfig')[replace(parameters('configKey'), ' ', '')]), lambda('item', createObject('abbreviation', coalesce(tryGet(lambdaVariables('item'), 'abbreviation'), ''), 'name', parameters('configKey'))))[0]]"
          }
        },
        "resolveResourceTypeValue": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "$ref": "#/definitions/resourceTypeInfoType",
            "nullable": true,
            "value": "[map(createArray(if(equals(tryGet(parameters('resourceTypeConfig'), parameters('configKey')), null()), if(coalesce(parameters('throwError'), true()), parameters('resourceTypeConfig')[parameters('configKey')], null()), tryGet(parameters('resourceTypeConfig'), parameters('configKey')))), lambda('item', createObject('abbreviation', coalesce(tryGet(lambdaVariables('item'), 'abbreviation'), ''), 'name', parameters('configKey'))))[0]]"
          }
        },
        "resolveInstanceValue": {
          "parameters": [
            {
              "type": "int",
              "nullable": true,
              "name": "value"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "configKey"
            },
            {
              "type": "string",
              "name": "valueKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            }
          ],
          "output": {
            "$ref": "#/definitions/instanceInfoType",
            "value": {
              "value": "[parameters('value')]",
              "minValue": "[__bicep.resolveAny(createArray(createObject('key', 'minValue', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey'))), createObject('key', 'minValue', 'object', tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey'))), createObject('key', 'minValue', 'object', tryGet(parameters('formatConfig'), parameters('valueKey'))))).result]",
              "maxValue": "[__bicep.resolveAny(createArray(createObject('key', 'maxValue', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey'))), createObject('key', 'maxValue', 'object', tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey'))), createObject('key', 'maxValue', 'object', tryGet(parameters('formatConfig'), parameters('valueKey'))))).result]",
              "padding": {
                "totalLength": "[__bicep.resolveAny(createArray(createObject('key', 'totalLength', 'object', tryGet(tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey')), 'padding')), createObject('key', 'totalLength', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey')), 'padding')), createObject('key', 'totalLength', 'object', tryGet(tryGet(parameters('formatConfig'), parameters('valueKey')), 'padding')))).result]",
                "character": "[__bicep.resolveAny(createArray(createObject('key', 'character', 'object', tryGet(tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey')), 'padding')), createObject('key', 'character', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey')), 'padding')), createObject('key', 'character', 'object', tryGet(tryGet(parameters('formatConfig'), parameters('valueKey')), 'padding')))).result]"
              }
            }
          }
        },
        "resolveUniqueValue": {
          "parameters": [
            {
              "type": "object",
              "nullable": true,
              "name": "value"
            },
            {
              "type": "object",
              "name": "values"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/placeholderInfoType"
              },
              "name": "placeholders"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "configKey"
            },
            {
              "type": "string",
              "name": "valueKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            }
          ],
          "output": {
            "$ref": "#/definitions/uniqueInfoType",
            "value": {
              "length": "[__bicep.resolveAny(createArray(createObject('key', 'length', 'object', parameters('value')), createObject('key', 'length', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey'))), createObject('key', 'length', 'object', tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey'))), createObject('key', 'length', 'object', tryGet(parameters('formatConfig'), parameters('valueKey'))))).result]",
              "seed": "[coalesce(__bicep.resolveAny(createArray(createObject('key', 'seed', 'object', parameters('value')), createObject('key', 'seed', 'object', tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), parameters('valueKey'))), createObject('key', 'seed', 'object', tryGet(tryGet(parameters('userConfig'), 'format'), parameters('valueKey'))), createObject('key', 'seed', 'object', tryGet(parameters('formatConfig'), parameters('valueKey'))))).result, reduce(map(items(parameters('values')), lambda('item', createObject('key', lambdaVariables('item').key, 'value', lambdaVariables('item').value, 'result', ''))), createObject('key', '', 'value', '', 'result', ''), lambda('current', 'next', createObject('key', lambdaVariables('next').key, 'value', lambdaVariables('next').value, 'result', if(and(not(equals(lambdaVariables('next').key, 'UNIQUE')), greater(length(filter(parameters('placeholders'), lambda('item', equals(tryGet(lambdaVariables('item'), 'name'), lambdaVariables('next').key)))), 0)), if(equals(lambdaVariables('current').result, ''), lambdaVariables('next').value, format('{0},{1}', lambdaVariables('current').result, lambdaVariables('next').value)), lambdaVariables('current').result)))).result)]"
            }
          }
        },
        "resolveValue": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "configKey"
            },
            {
              "type": "string",
              "name": "valueKey"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "object",
            "nullable": true,
            "value": {
              "key": "[parameters('valueKey')]",
              "value": "[if(contains(coalesce(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), createObject()), 'allowedValues'), if(contains(coalesce(tryGet(tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), '')), 'allowedValues'), createObject()), parameters('valueKey')), tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), ''), 'allowedValues', parameters('valueKey')), if(coalesce(parameters('throwError'), true()), tryGet(tryGet(parameters('userConfig'), 'placeholder'), coalesce(parameters('configKey'), ''), 'allowedValues', format('{0}.{1}', parameters('configKey'), parameters('valueKey'))), null())), null())]"
            }
          }
        },
        "getRangedInt": {
          "parameters": [
            {
              "type": "int",
              "nullable": true,
              "name": "value"
            },
            {
              "type": "int",
              "nullable": true,
              "name": "minValue"
            },
            {
              "type": "int",
              "name": "maxValue"
            }
          ],
          "output": {
            "type": "int",
            "value": "[sub(range(coalesce(parameters('minValue'), 1), parameters('maxValue'))[if(greaterOrEquals(sub(coalesce(parameters('value'), -1), coalesce(parameters('minValue'), 1)), 0), sub(coalesce(parameters('value'), -1), sub(coalesce(parameters('minValue'), 1), 1)), -1)], 1)]"
          }
        },
        "getEnvironmentString": {
          "parameters": [
            {
              "$ref": "#/definitions/environmentInfoType",
              "name": "environmentInfo"
            }
          ],
          "output": {
            "type": "string",
            "value": "[coalesce(tryGet(parameters('environmentInfo'), 'abbreviation'), parameters('environmentInfo').name)]"
          }
        },
        "getInstanceString": {
          "parameters": [
            {
              "$ref": "#/definitions/instanceInfoType",
              "name": "instanceInfo"
            }
          ],
          "output": {
            "type": "string",
            "value": "[padLeft(__bicep.getRangedInt(parameters('instanceInfo').value, parameters('instanceInfo').minValue, parameters('instanceInfo').maxValue), parameters('instanceInfo').padding.totalLength, parameters('instanceInfo').padding.character)]"
          }
        },
        "getRegionString": {
          "parameters": [
            {
              "$ref": "#/definitions/regionInfoType",
              "name": "regionInfo"
            }
          ],
          "output": {
            "type": "string",
            "value": "[coalesce(tryGet(parameters('regionInfo'), 'abbreviation'), parameters('regionInfo').name)]"
          }
        },
        "getResourceTypeString": {
          "parameters": [
            {
              "$ref": "#/definitions/resourceTypeInfoType",
              "nullable": true,
              "name": "resourceTypeInfo"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[coalesce(tryGet(parameters('resourceTypeInfo'), 'abbreviation'), tryGet(parameters('resourceTypeInfo'), 'name'))]"
          }
        },
        "getUniqueString": {
          "parameters": [
            {
              "$ref": "#/definitions/uniqueInfoType",
              "name": "uniqueInfo"
            }
          ],
          "output": {
            "type": "string",
            "value": "[substring(uniqueString(coalesce(parameters('uniqueInfo').seed, '')), 0, coalesce(parameters('uniqueInfo').length, -1))]"
          }
        },
        "getValueString": {
          "parameters": [
            {
              "type": "object",
              "nullable": true,
              "name": "value"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[coalesce(tryGet(tryGet(parameters('value'), 'value'), 'abbreviation'), tryGet(parameters('value'), 'key'))]"
          }
        },
        "getFormatString": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(and(contains(parameters('configKey'), '{'), contains(parameters('configKey'), '}')), parameters('configKey'), coalesce(__bicep.resolveFormatValue(parameters('configKey'), 'formatString', parameters('formatConfig'), parameters('userConfig')), parameters('configKey')))]"
          }
        },
        "getSeparatorString": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[coalesce(__bicep.resolveFormatValue(parameters('configKey'), 'separator', parameters('formatConfig'), parameters('userConfig')), '')]"
          }
        },
        "getCasing": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[__bicep.resolveFormatValue(parameters('configKey'), 'casing', parameters('formatConfig'), parameters('userConfig'))]"
          }
        },
        "getMaxLength": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "int",
            "nullable": true,
            "value": "[json(format('{{\"value\":{0}}}', coalesce(__bicep.resolveFormatValue(parameters('configKey'), 'maxLength', parameters('formatConfig'), parameters('userConfig')), 'null'))).value]"
          }
        },
        "applyCasing": {
          "parameters": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "casing"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(equals(toLower(coalesce(parameters('casing'), '')), 'lower'), toLower(parameters('value')), if(equals(toLower(coalesce(parameters('casing'), '')), 'upper'), toUpper(parameters('value')), parameters('value')))]"
          }
        },
        "getPlaceholderInfo": {
          "parameters": [
            {
              "type": "string",
              "name": "formatString"
            }
          ],
          "output": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/placeholderInfoType"
            },
            "value": "[concat(filter(reduce(map(split(parameters('formatString'), '['), lambda('item1', if(contains(lambdaVariables('item1'), ']'), reduce(map(split(lambdaVariables('item1'), ']'), lambda('item2', 'index2', map(filter(split(lambdaVariables('item2'), '{'), lambda('item3', not(equals(coalesce(lambdaVariables('item3'), ''), '')))), lambda('item4', __bicep.toPlaceholderInfo(coalesce(split(lambdaVariables('item4'), '}')[0], ''), equals(lambdaVariables('index2'), 0)))))), createArray(), lambda('current2', 'next2', concat(lambdaVariables('current2'), lambdaVariables('next2')))), map(filter(split(lambdaVariables('item1'), '{'), lambda('item5', not(equals(coalesce(lambdaVariables('item5'), ''), '')))), lambda('item6', __bicep.toPlaceholderInfo(coalesce(split(lambdaVariables('item6'), '}')[0], ''), false())))))), createArray(), lambda('current1', 'next1', concat(lambdaVariables('current1'), lambdaVariables('next1')))), lambda('item', not(equals(lambdaVariables('item'), null())))), createArray(createObject('name', '-', 'optional', false()), createObject('name', 'SEPARATOR', 'optional', false())))]"
          }
        },
        "toPlaceholderInfo": {
          "parameters": [
            {
              "type": "string",
              "name": "name"
            },
            {
              "type": "bool",
              "name": "optional"
            }
          ],
          "output": {
            "$ref": "#/definitions/placeholderInfoType",
            "nullable": true,
            "value": "[if(not(contains(createArray('', '-', 'SEPARATOR'), trim(parameters('name')))), createObject('name', trim(parameters('name')), 'optional', parameters('optional')), null())]"
          }
        },
        "validate": {
          "parameters": [
            {
              "$ref": "#/definitions/formatNameInfoType",
              "name": "formatInfo"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "result"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[and(and(and(__bicep.validatePlaceholders(parameters('formatInfo').placeholders, parameters('formatInfo').valueKeys, parameters('formatInfo').validValueKeys, parameters('throwError')), __bicep.validateValues(parameters('formatInfo').placeholders, parameters('formatInfo').valueKeys, parameters('formatInfo').additionalValues, parameters('throwError'))), greater(length(parameters('formatInfo').validValueKeys), 0)), if(not(equals(parameters('result'), null())), __bicep.validateLength(parameters('formatInfo'), coalesce(parameters('result'), ''), parameters('throwError')), true()))]"
          }
        },
        "validateValues": {
          "parameters": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/placeholderInfoType"
              },
              "name": "placeholders"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "name": "valueKeys"
            },
            {
              "type": "bool",
              "name": "additionalValues"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[if(parameters('additionalValues'), true(), equals(map(createArray(reduce(map(parameters('valueKeys'), lambda('item1', createObject('item', lambdaVariables('item1'), 'isValid', greater(length(filter(parameters('placeholders'), lambda('item2', equals(tryGet(lambdaVariables('item2'), 'name'), lambdaVariables('item1'))))), 0), 'error', createArray()))), createObject('item', null(), 'isValid', null(), 'error', createArray()), lambda('current', 'next', createObject('error', concat(lambdaVariables('current').error, if(not(coalesce(lambdaVariables('next').isValid, true())), createArray(lambdaVariables('next').item), createArray())))))), lambda('item0', if(equals(length(lambdaVariables('item0').error), 0), null(), if(coalesce(parameters('throwError'), true()), reduce(map(parameters('placeholders'), lambda('item', createObject(format('{0}', coalesce(tryGet(lambdaVariables('item'), 'name'), '')), null()))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), lambdaVariables('next'))))[format('placeholder: ''{0}''', join(lambdaVariables('item0').error, ', '))], lambdaVariables('item0').error))))[0], null()))]"
          }
        },
        "validatePlaceholders": {
          "parameters": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/placeholderInfoType"
              },
              "name": "placeholders"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "name": "valueKeys"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "name": "validValueKeys"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[equals(map(createArray(reduce(map(parameters('placeholders'), lambda('item', createObject('item', lambdaVariables('item'), 'isValid', if(coalesce(tryGet(lambdaVariables('item'), 'optional'), true()), true(), contains(parameters('validValueKeys'), coalesce(tryGet(lambdaVariables('item'), 'name'), ''))), 'error', createArray()))), createObject('item', null(), 'isValid', null(), 'error', createArray()), lambda('current', 'next', createObject('error', concat(lambdaVariables('current').error, if(not(coalesce(lambdaVariables('next').isValid, true())), createArray(coalesce(tryGet(lambdaVariables('next').item, 'name'), '')), createArray())))))), lambda('item0', if(equals(length(lambdaVariables('item0').error), 0), null(), if(coalesce(parameters('throwError'), true()), reduce(map(parameters('valueKeys'), lambda('item1', createObject(format('{0}', lambdaVariables('item1')), null()))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), lambdaVariables('next'))))[format('value: ''{0}''', join(lambdaVariables('item0').error, ', '))], lambdaVariables('item0').error))))[0], null())]"
          }
        },
        "validateLength": {
          "parameters": [
            {
              "$ref": "#/definitions/formatNameInfoType",
              "name": "formatInfo"
            },
            {
              "type": "string",
              "name": "result"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "throwError"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[if(not(equals(parameters('result'), '')), if(not(equals(parameters('formatInfo').maxLength, null())), if(coalesce(parameters('throwError'), true()), greater(range(0, coalesce(parameters('formatInfo').maxLength, 0))[sub(length(parameters('result')), 1)], 0), lessOrEquals(length(parameters('result')), coalesce(parameters('formatInfo').maxLength, 0))), true()), not(equals(string(__bicep.emptyArray()[0]), '')))]"
          }
        },
        "emptyArray": {
          "parameters": [],
          "output": {
            "type": "array",
            "value": []
          }
        },
        "getValidValueKeys": {
          "parameters": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/placeholderInfoType"
              },
              "name": "placeholders"
            },
            {
              "type": "object",
              "name": "values"
            }
          ],
          "output": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "value": "[union(filter(map(parameters('placeholders'), lambda('item', if(not(equals(trim(string(coalesce(tryGet(parameters('values'), coalesce(tryGet(lambdaVariables('item'), 'name'), '')), ''))), '')), coalesce(tryGet(lambdaVariables('item'), 'name'), ''), if(coalesce(tryGet(lambdaVariables('item'), 'optional'), false()), if(contains(parameters('values'), coalesce(tryGet(lambdaVariables('item'), 'name'), '')), coalesce(tryGet(lambdaVariables('item'), 'name'), ''), ''), '')))), lambda('item', not(equals(lambdaVariables('item'), '')))), createArray('-', 'SEPARATOR'))]"
          }
        },
        "resolveFormatValue": {
          "parameters": [
            {
              "type": "string",
              "name": "configKey"
            },
            {
              "type": "string",
              "name": "valueKey"
            },
            {
              "type": "object",
              "name": "formatConfig"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[map(createArray(__bicep.resolveAny(createArray(createObject('key', '$value', 'object', if(contains(string(coalesce(tryGet(tryGet(parameters('userConfig'), parameters('configKey')), parameters('valueKey')), createObject())), '\"$value\":'), tryGet(tryGet(parameters('userConfig'), parameters('configKey')), parameters('valueKey')), createObject())), createObject('key', '$value', 'object', if(contains(string(coalesce(tryGet(tryGet(parameters('formatConfig'), parameters('configKey')), parameters('valueKey')), createObject())), '\"$value\":'), tryGet(tryGet(parameters('formatConfig'), parameters('configKey')), parameters('valueKey')), createObject()))))), lambda('item', if(lambdaVariables('item').hasValue, lambdaVariables('item'), __bicep.resolveAny(createArray(createObject('key', parameters('valueKey'), 'object', tryGet(parameters('userConfig'), parameters('configKey'))), createObject('key', parameters('valueKey'), 'object', tryGet(parameters('formatConfig'), parameters('configKey'))), createObject('key', parameters('valueKey'), 'object', tryGet(parameters('userConfig'), '$default')), createObject('key', parameters('valueKey'), 'object', tryGet(parameters('formatConfig'), '$default')))))))[0].stringResult]"
          }
        },
        "resolveAny": {
          "parameters": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resolveItemType"
              },
              "name": "items"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(parameters('items'), lambda('item', createObject('key', lambdaVariables('item').key, 'object', lambdaVariables('item').object, 'result', null(), 'stringResult', null(), 'hasValue', false()))), createObject('result', null(), 'stringResult', null(), 'hasValue', false()), lambda('current', 'next', createObject('result', if(not(lambdaVariables('current').hasValue), tryGet(lambdaVariables('next').object, lambdaVariables('next').key), lambdaVariables('current').result), 'stringResult', if(not(lambdaVariables('current').hasValue), if(not(equals(trim(string(coalesce(tryGet(lambdaVariables('next').object, lambdaVariables('next').key), ''))), '')), string(coalesce(tryGet(lambdaVariables('next').object, lambdaVariables('next').key), '')), lambdaVariables('current').stringResult), lambdaVariables('current').stringResult), 'hasValue', if(lambdaVariables('current').hasValue, true(), or(not(equals(tryGet(lambdaVariables('next').object, lambdaVariables('next').key), null())), and(contains(coalesce(lambdaVariables('next').object, createObject()), lambdaVariables('next').key), equals(lambdaVariables('next').key, '$value')))))))]"
          }
        }
      }
    }
  ],
  "resources": {}
}
