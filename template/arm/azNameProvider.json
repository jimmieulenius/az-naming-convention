{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "definitions": {
    "uniqueType": {
      "type": "object",
      "properties": {
        "length": {
          "type": "int",
          "nullable": true
        },
        "seed": {
          "type": "string",
          "nullable": true
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "nameObject": {
          "parameters": [
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "name": "placeholder"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(items(parameters('placeholder')), createObject(), lambda('current1', 'next1', union(lambdaVariables('current1'), if(or(contains(lambdaVariables('next1').value, 'format'), contains(lambdaVariables('next1').value, 'resourceType')), createObject(format('{0}', lambdaVariables('next1').key), __bicep.formatName(if(equals(tryGet(lambdaVariables('next1').value, 'format'), 'deployment'), __bicep.getFormatValue('deployment', 'value', createObject(), parameters('formatConfig')).value, coalesce(tryGet(lambdaVariables('next1').value, 'format'), __bicep.getFormatValue(__bicep.toEmptyIfNull(tryGet(lambdaVariables('next1').value, 'resourceType')), 'value', coalesce(parameters('userConfig'), createObject()), parameters('formatConfig')).value)), union(reduce(if(not(equals(tryGet(lambdaVariables('next1').value, 'value'), null())), items(lambdaVariables('next1').value.value), createArray()), parameters('value'), lambda('current2', 'next2', union(lambdaVariables('current2'), createObject(format('{0}', lambdaVariables('next2').key), lambdaVariables('next2').value)))), createObject('RESOURCE_TYPE', __bicep.toEmptyIfNull(tryGet(lambdaVariables('next1').value, 'resourceType'))), if(equals(tryGet(lambdaVariables('next1').value, 'format'), 'deployment'), createObject('FORMAT_KEY', tryGet(lambdaVariables('next1').value, 'format')), createObject())), parameters('userConfig'), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('formatConfig'))), createObject(format('{0}', lambdaVariables('next1').key), lambdaVariables('next1').value)))))]"
          },
          "metadata": {
            "__bicep_export!": true
          }
        },
        "formatName": {
          "parameters": [
            {
              "type": "string",
              "name": "format"
            },
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[__bicep.validateLength(__bicep.validatePlaceholder(__bicep.setPlaceholder(join(map(split(__bicep.getFormatString(parameters('format'), coalesce(parameters('userConfig'), createObject()), parameters('resourceTypeConfig'), parameters('formatConfig')), '['), lambda('item1', if(contains(lambdaVariables('item1'), ']'), format('{0}{1}', if(__bicep.placeholderReplaced(split(lambdaVariables('item1'), ']')[0], parameters('value'), createArray('-', 'SEPARATOR'), true()), __bicep.setPlaceholder(split(lambdaVariables('item1'), ']')[0], __bicep.toPlaceholder(parameters('value'), coalesce(parameters('userConfig'), createObject()), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('formatConfig')), true()), ''), join(skip(split(lambdaVariables('item1'), ']'), 1), '')), lambdaVariables('item1')))), ''), if(__bicep.placeholderReplaced(join(map(split(__bicep.getFormatString(parameters('format'), coalesce(parameters('userConfig'), createObject()), parameters('resourceTypeConfig'), parameters('formatConfig')), '['), lambda('item1', if(contains(lambdaVariables('item1'), ']'), '', lambdaVariables('item1')))), ''), __bicep.nonEmptyProperties(parameters('value')), createArray('-', 'SEPARATOR'), false()), union(__bicep.toPlaceholder(parameters('value'), coalesce(parameters('userConfig'), createObject()), parameters('resourceTypeConfig'), parameters('regionConfig'), parameters('environmentConfig'), parameters('formatConfig')), createObject('-', coalesce(coalesce(tryGet(parameters('value'), '-'), tryGet(parameters('value'), 'SEPARATOR')), __bicep.getSeparatorValue(if(contains(parameters('formatConfig').format, parameters('format')), parameters('format'), __bicep.toEmptyIfNull(tryGet(parameters('value'), 'RESOURCE_TYPE'))), coalesce(parameters('userConfig'), createObject()), parameters('formatConfig'))), 'SEPARATOR', coalesce(coalesce(tryGet(parameters('value'), '-'), tryGet(parameters('value'), 'SEPARATOR')), __bicep.getSeparatorValue(if(contains(parameters('formatConfig').format, parameters('format')), parameters('format'), __bicep.toEmptyIfNull(tryGet(parameters('value'), 'RESOURCE_TYPE'))), coalesce(parameters('userConfig'), createObject()), parameters('formatConfig'))))), createObject()), false())), coalesce(tryGet(parameters('value'), 'FORMAT_KEY'), tryGet(parameters('value'), 'RESOURCE_TYPE')), parameters('formatConfig'))]"
          },
          "metadata": {
            "__bicep_export!": true
          }
        },
        "validateLength": {
          "parameters": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "resourceType"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(not(equals(parameters('value'), '')), if(and(not(equals(parameters('resourceType'), null())), not(equals(__bicep.getFormatValue(coalesce(parameters('resourceType'), ''), 'length', createObject(), parameters('formatConfig')).value, null()))), if(greater(range(0, coalesce(__bicep.getFormatValue(coalesce(parameters('resourceType'), ''), 'length', createObject(), parameters('formatConfig')).value, 0))[sub(length(parameters('value')), 1)], 0), parameters('value'), ''), parameters('value')), string(__bicep.emptyArray()[0]))]"
          }
        },
        "emptyArray": {
          "parameters": [],
          "output": {
            "type": "array",
            "value": []
          }
        },
        "getFormatString": {
          "parameters": [
            {
              "type": "string",
              "name": "format"
            },
            {
              "type": "object",
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(and(not(equals(parameters('userConfig'), createObject())), contains(parameters('userConfig').format, parameters('format'))), coalesce(tryGet(parameters('userConfig').format[parameters('format')], 'value'), __bicep.getFormatValue(parameters('format'), 'value', parameters('userConfig'), parameters('formatConfig')).value), if(contains(parameters('formatConfig').format, parameters('format')), coalesce(tryGet(parameters('formatConfig').format[parameters('format')], 'value'), __bicep.getFormatValue(parameters('format'), 'value', parameters('userConfig'), parameters('formatConfig')).value), if(contains(parameters('resourceTypeConfig'), parameters('format')), __bicep.getFormatValue('$default', 'value', parameters('userConfig'), parameters('formatConfig')).value, parameters('format'))))]"
          }
        },
        "setCasing": {
          "parameters": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "casing"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(equals(toLower(__bicep.toEmptyIfNull(parameters('casing'))), 'lower'), toLower(parameters('value')), if(equals(toLower(__bicep.toEmptyIfNull(parameters('casing'))), 'upper'), toUpper(parameters('value')), parameters('value')))]"
          }
        },
        "toInstance": {
          "parameters": [
            {
              "type": "int",
              "nullable": true,
              "name": "value"
            },
            {
              "type": "int",
              "nullable": true,
              "name": "minValue"
            },
            {
              "type": "int",
              "name": "maxValue"
            }
          ],
          "output": {
            "type": "int",
            "value": "[range(coalesce(parameters('minValue'), 1), parameters('maxValue'))[if(greaterOrEquals(sub(coalesce(parameters('value'), -1), coalesce(parameters('minValue'), 1)), 0), sub(coalesce(parameters('value'), -1), coalesce(parameters('minValue'), 1)), -1)]]"
          }
        },
        "resourceTypeAbbreviation": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "resourceType"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(contains(createArray('deployment'), parameters('resourceType')), '', parameters('resourceTypeConfig')[__bicep.toEmptyIfNull(parameters('resourceType'))].abbreviation)]"
          }
        },
        "toEmptyIfNull": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[coalesce(parameters('string'), '')]"
          }
        },
        "toPlaceholder": {
          "parameters": [
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "resourceTypeConfig"
            },
            {
              "type": "object",
              "name": "regionConfig"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('value')), lambda('item', createObject(format('{0}', lambdaVariables('item').key), __bicep.setCasing(__bicep.toEmptyIfNull(if(equals(lambdaVariables('item').key, 'ENVIRONMENT'), if(not(equals(__bicep.toEmptyIfNull(lambdaVariables('item').value), '')), if(contains(parameters('userConfig'), lambdaVariables('item').key), parameters('userConfig')[lambdaVariables('item').key][lambdaVariables('item').value].abbreviation, __bicep.environmentAbbreviation(lambdaVariables('item').value, parameters('environmentConfig'))), ''), if(equals(lambdaVariables('item').key, 'INSTANCE'), if(not(equals(lambdaVariables('item').value, null())), padLeft(__bicep.toInstance(lambdaVariables('item').value, 1, parameters('formatConfig').$instance.maxValue), parameters('formatConfig').$instance.padding.totalLength, parameters('formatConfig').$instance.padding.character), ''), if(equals(lambdaVariables('item').key, 'REGION'), if(not(equals(__bicep.toEmptyIfNull(lambdaVariables('item').value), '')), __bicep.regionAbbreviation(lambdaVariables('item').value, parameters('regionConfig')), ''), if(equals(lambdaVariables('item').key, 'RESOURCE_TYPE'), __bicep.resourceTypeAbbreviation(lambdaVariables('item').value, parameters('resourceTypeConfig')), if(equals(lambdaVariables('item').key, 'UNIQUE'), if(not(equals(lambdaVariables('item').value, null())), __bicep.toUnique(lambdaVariables('item').value, parameters('value'), parameters('formatConfig')), ''), if(contains(parameters('userConfig'), lambdaVariables('item').key), if(not(equals(lambdaVariables('item').value, null())), if(contains(parameters('userConfig')[lambdaVariables('item').key], '$instance'), __bicep.getInstance(lambdaVariables('item'), parameters('userConfig')).result, if(contains(parameters('userConfig')[lambdaVariables('item').key], '$unique'), __bicep.getUnique(lambdaVariables('item'), parameters('value'), parameters('userConfig'), parameters('formatConfig')), coalesce(tryGet(parameters('userConfig')[lambdaVariables('item').key][lambdaVariables('item').value], 'abbreviation'), lambdaVariables('item').value))), coalesce(tryGet(tryGet(parameters('userConfig')[lambdaVariables('item').key], '$default'), 'abbreviation'), lambdaVariables('item').value)), lambdaVariables('item').value))))))), coalesce(__bicep.getFormatValue(coalesce(tryGet(parameters('value'), 'FORMAT_KEY'), ''), 'casing', parameters('userConfig'), parameters('formatConfig')).value, ''))))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), lambdaVariables('next'))))]"
          }
        },
        "setPlaceholder": {
          "parameters": [
            {
              "type": "string",
              "name": "string"
            },
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "bool",
              "name": "allowEmpty"
            }
          ],
          "output": {
            "type": "string",
            "value": "[reduce(map(items(parameters('value')), lambda('item', createObject('key', lambdaVariables('item').key, 'value', lambdaVariables('item').value, 'result', parameters('string')))), createObject('key', '', 'value', '', 'result', parameters('string')), lambda('current', 'next', createObject('key', lambdaVariables('next').key, 'value', lambdaVariables('next').value, 'result', if(not(equals(string(coalesce(lambdaVariables('next').value, '')), '')), replace(lambdaVariables('current').result, format('{{{0}}}', lambdaVariables('next').key), if(not(equals(tryGet(lambdaVariables('next').value, 'value'), null())), coalesce(__bicep.getValue(lambdaVariables('next').value), ''), string(coalesce(lambdaVariables('next').value, '')))), if(parameters('allowEmpty'), replace(lambdaVariables('current').result, format('{{{0}}}', lambdaVariables('next').key), ''), lambdaVariables('current').result))))).result]"
          }
        },
        "getInstance": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            },
            {
              "type": "object",
              "name": "userConfig"
            }
          ],
          "output": {
            "type": "object",
            "value": "[if(contains(parameters('userConfig')[string(parameters('keyValue').key)].$instance, 'padding'), createObject('result', padLeft(__bicep.toInstance(parameters('keyValue').value, tryGet(parameters('userConfig')[string(parameters('keyValue').key)].$instance, 'minValue'), parameters('userConfig')[string(parameters('keyValue').key)].$instance.maxValue), coalesce(tryGet(parameters('userConfig')[string(parameters('keyValue').key)].$instance.padding, 'totalLength'), 2), coalesce(tryGet(parameters('userConfig')[string(parameters('keyValue').key)].$instance.padding, 'character'), '0'))), createObject('result', __bicep.toInstance(parameters('keyValue').value, tryGet(parameters('userConfig')[string(parameters('keyValue').key)].$instance, 'minValue'), parameters('userConfig')[string(parameters('keyValue').key)].$instance.maxValue)))]"
          }
        },
        "getUnique": {
          "parameters": [
            {
              "type": "object",
              "name": "keyValue"
            },
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[__bicep.toUnique(if(not(equals(coalesce(parameters('keyValue').value, createObject()), createObject())), parameters('keyValue').value, parameters('userConfig')[string(parameters('keyValue').key)].$unique), parameters('value'), parameters('formatConfig'))]"
          }
        },
        "toUnique": {
          "parameters": [
            {
              "$ref": "#/definitions/uniqueType",
              "nullable": true,
              "name": "options"
            },
            {
              "type": "object",
              "name": "value"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[substring(uniqueString(coalesce(coalesce(tryGet(parameters('options'), 'seed'), tryGet(tryGet(parameters('formatConfig'), '$unique'), 'seed')), reduce(map(items(parameters('value')), lambda('item', createObject('key', lambdaVariables('item').key, 'value', lambdaVariables('item').value, 'result', ''))), createObject('key', '', 'value', '', 'result', ''), lambda('current', 'next', createObject('key', lambdaVariables('next').key, 'value', lambdaVariables('next').value, 'result', if(not(equals(lambdaVariables('next').key, 'UNIQUE')), if(equals(lambdaVariables('current').result, ''), lambdaVariables('next').value, format('{0},{1}', lambdaVariables('current').result, lambdaVariables('next').value)), lambdaVariables('current').result)))).result)), 0, coalesce(tryGet(parameters('options'), 'length'), parameters('formatConfig').$unique.length))]"
          }
        },
        "toValue": {
          "parameters": [
            {
              "type": "object",
              "name": "object"
            },
            {
              "type": "string",
              "name": "property"
            }
          ],
          "output": {
            "type": "object",
            "value": {
              "value": "[tryGet(parameters('object'), parameters('property'))]"
            }
          }
        },
        "getValue": {
          "parameters": [
            {
              "type": "object",
              "name": "object"
            }
          ],
          "output": {
            "type": "string",
            "nullable": true,
            "value": "[if(contains(parameters('object').value, '$value'), parameters('object').value.$value, parameters('object').value)]"
          }
        },
        "getFormatValue": {
          "parameters": [
            {
              "type": "string",
              "name": "resourceType"
            },
            {
              "type": "string",
              "name": "name"
            },
            {
              "type": "object",
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "object",
            "value": "[if(and(and(not(equals(parameters('userConfig'), createObject())), contains(__bicep.propertyObject(parameters('userConfig').format, parameters('resourceType'), null()), parameters('name'))), not(equals(__bicep.propertyObject(parameters('userConfig').format, parameters('resourceType'), null())[parameters('name')], null()))), __bicep.toValue(__bicep.propertyObject(parameters('userConfig').format, parameters('resourceType'), null()), parameters('name')), if(and(contains(__bicep.propertyObject(parameters('formatConfig').format, parameters('resourceType'), null()), parameters('name')), not(equals(__bicep.propertyObject(parameters('formatConfig').format, parameters('resourceType'), null())[parameters('name')], null()))), __bicep.toValue(__bicep.propertyObject(parameters('formatConfig').format, parameters('resourceType'), null()), parameters('name')), if(and(and(not(equals(parameters('userConfig'), createObject())), contains(__bicep.propertyObject(parameters('userConfig').format, '$default', null()), parameters('name'))), not(equals(__bicep.propertyObject(parameters('userConfig').format, '$default', null())[parameters('name')], null()))), __bicep.toValue(tryGet(parameters('userConfig').format, '$default'), parameters('name')), __bicep.toValue(tryGet(parameters('formatConfig').format, '$default'), parameters('name')))))]"
          }
        },
        "getSeparatorValue": {
          "parameters": [
            {
              "type": "string",
              "name": "resourceType"
            },
            {
              "type": "object",
              "name": "userConfig"
            },
            {
              "type": "object",
              "name": "formatConfig"
            }
          ],
          "output": {
            "type": "object",
            "value": "[__bicep.getFormatValue(parameters('resourceType'), 'separator', parameters('userConfig'), parameters('formatConfig'))]"
          }
        },
        "placeholderReplaced": {
          "parameters": [
            {
              "type": "string",
              "name": "format"
            },
            {
              "type": "object",
              "name": "placeholder"
            },
            {
              "type": "array",
              "nullable": true,
              "name": "exclude"
            },
            {
              "type": "bool",
              "name": "all"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[if(parameters('all'), not(contains(__bicep.placeholderReplacedItems(parameters('format'), parameters('placeholder'), parameters('exclude')), false())), contains(__bicep.placeholderReplacedItems(parameters('format'), parameters('placeholder'), parameters('exclude')), true()))]"
          }
        },
        "placeholderReplacedItems": {
          "parameters": [
            {
              "type": "string",
              "name": "format"
            },
            {
              "type": "object",
              "name": "placeholder"
            },
            {
              "type": "array",
              "nullable": true,
              "name": "exclude"
            }
          ],
          "output": {
            "type": "array",
            "value": "[map(map(split(replace(replace(parameters('format'), '[', ''), ']', ''), '{'), lambda('item', if(contains(lambdaVariables('item'), '}'), split(lambdaVariables('item'), '}')[0], ''))), lambda('item', if(and(not(equals(lambdaVariables('item'), '')), not(contains(coalesce(parameters('exclude'), createArray()), lambdaVariables('item')))), not(equals(string(coalesce(parameters('placeholder')[lambdaVariables('item')], '')), '')), true())))]"
          }
        },
        "nonEmptyProperties": {
          "parameters": [
            {
              "type": "object",
              "name": "value"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(map(items(parameters('value')), lambda('item', if(or(equals(lambdaVariables('item').value, null()), not(equals(string(lambdaVariables('item').value), ''))), createObject(format('{0}', lambdaVariables('item').key), lambdaVariables('item').value), createObject()))), createObject(), lambda('current', 'next', union(lambdaVariables('current'), lambdaVariables('next'))))]"
          }
        },
        "validatePlaceholder": {
          "parameters": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "output": {
            "type": "string",
            "value": "[reduce(map(split(parameters('value'), '{'), lambda('item', if(contains(lambdaVariables('item'), '}'), split(lambdaVariables('item'), '}')[0], ''))), parameters('value'), lambda('current', 'next', if(not(equals(lambdaVariables('next'), '')), string(__bicep.emptyObject()[lambdaVariables('next')]), lambdaVariables('current'))))]"
          }
        },
        "emptyObject": {
          "parameters": [],
          "output": {
            "type": "object",
            "value": {}
          }
        },
        "environmentAbbreviation": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "environment"
            },
            {
              "type": "object",
              "name": "environmentConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[parameters('environmentConfig')[__bicep.toEmptyIfNull(parameters('environment'))].abbreviation]"
          }
        },
        "regionAbbreviation": {
          "parameters": [
            {
              "type": "string",
              "nullable": true,
              "name": "region"
            },
            {
              "type": "object",
              "name": "regionConfig"
            }
          ],
          "output": {
            "type": "string",
            "value": "[parameters('regionConfig')[replace(__bicep.toEmptyIfNull(parameters('region')), ' ', '')].abbreviation]"
          }
        },
        "propertyObject": {
          "parameters": [
            {
              "type": "object",
              "name": "object"
            },
            {
              "type": "string",
              "name": "name"
            },
            {
              "type": "object",
              "nullable": true,
              "name": "fallbackValue"
            }
          ],
          "output": {
            "type": "object",
            "value": "[if(contains(parameters('object'), parameters('name')), parameters('object')[parameters('name')], coalesce(parameters('fallbackValue'), createObject()))]"
          }
        }
      }
    }
  ],
  "parameters": {
    "value": {
      "type": "object"
    },
    "placeholder": {
      "type": "object"
    },
    "environmentTemplateUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/jimmieulenius/az-naming-convention/main/template/arm/environment.json"
    },
    "formatTemplateUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/jimmieulenius/az-naming-convention/main/template/arm/format.json"
    },
    "regionTemplateUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/jimmieulenius/az-naming-convention/main/template/arm/region.json"
    },
    "resourceTypeTemplateUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/jimmieulenius/az-naming-convention/main/template/arm/resourceType.json"
    },
    "userConfigTemplateUri": {
      "type": "string",
      "defaultValue": ""
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": {
    "linkedTemplate_res": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[concat('linkedTemplate-', parameters('utcValue'))]",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "https://raw.githubusercontent.com/jimmieulenius/az-naming-convention/main/template/arm/linkedTemplate.json",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "environment": {
            "value": "[parameters('environmentTemplateUri')]"
          },
          "format": {
            "value": "[parameters('formatTemplateUri')]"
          },
          "region": {
            "value": "[parameters('regionTemplateUri')]"
          },
          "resourceType": {
            "value": "[parameters('resourceTypeTemplateUri')]"
          },
          "userConfig": {
            "value": "[parameters('userConfigTemplateUri')]"
          }
        }
      }
    }
  },
  "outputs": {
    "nameObject": {
      "type": "object",
      "value": "[__bicep.nameObject(parameters('value'), parameters('placeholder'), reference('linkedTemplate_res').outputs.userConfig.value, reference('linkedTemplate_res').outputs.resourceType.value, reference('linkedTemplate_res').outputs.region.value, reference('linkedTemplate_res').outputs.environment.value, reference('linkedTemplate_res').outputs.format.value)]"
    }
  }
}
